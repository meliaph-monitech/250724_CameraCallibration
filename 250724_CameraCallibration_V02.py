# -*- coding: utf-8 -*-
"""250724_CameraCallibration_V02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JBkeO85f3TcbSLkHtUEEZbSPHwh963Ns
"""

import streamlit as st
import cv2
import numpy as np
import os
import tempfile
import zipfile
import matplotlib.pyplot as plt
from PIL import Image

# --- Sidebar: Inputs ---
st.sidebar.title("📁 Upload Calibration Images")
zip_file = st.sidebar.file_uploader("Upload a ZIP of CharuCo images", type=["zip"])

st.sidebar.title("📐 Board Settings")
dict_option = st.sidebar.selectbox("ArUco Dictionary", ["DICT_5X5_100", "DICT_4X4_100"])
squares_x = st.sidebar.number_input("Number of Squares (X - columns)", min_value=2, value=24)
squares_y = st.sidebar.number_input("Number of Squares (Y - rows)", min_value=2, value=17)
square_len = st.sidebar.number_input("Square Length (mm)", min_value=1.0, value=30.0)
marker_len = st.sidebar.number_input("Marker Length (mm)", min_value=1.0, value=22.0)

# --- Main Display ---
st.title("🔧 CharuCo Camera Calibration App")
st.markdown("Upload your calibration images in a ZIP file and explore camera parameters.")

if zip_file:
    with tempfile.TemporaryDirectory() as temp_dir:
        zip_path = os.path.join(temp_dir, "upload.zip")
        with open(zip_path, "wb") as f:
            f.write(zip_file.read())

        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(temp_dir)

        image_paths = [os.path.join(temp_dir, f) for f in os.listdir(temp_dir) if f.endswith(('.jpg', '.png', '.jpeg'))]

        if len(image_paths) == 0:
            st.error("No images found in the ZIP file.")
        else:
            st.success(f"{len(image_paths)} images loaded successfully.")

            # Preview first image
            st.subheader("🖼️ Sample Image Preview")
            img_preview = Image.open(image_paths[0])
            st.image(img_preview, caption="First image from upload", use_column_width=True)

            # Setup board and detection
            aruco_dict = cv2.aruco.getPredefinedDictionary(getattr(cv2.aruco, dict_option))
            board = cv2.aruco.CharucoBoard((squares_x, squares_y), square_len, marker_len, aruco_dict)

            all_corners = []
            all_ids = []
            image_size = None

            for path in image_paths:
                img = cv2.imread(path)
                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                corners, ids, _ = cv2.aruco.detectMarkers(gray, aruco_dict)
                if len(corners) > 0:
                    _, ch_corners, ch_ids = cv2.aruco.interpolateCornersCharuco(corners, ids, gray, board)
                    if ch_corners is not None and ch_ids is not None and len(ch_corners) > 4:
                        all_corners.append(ch_corners)
                        all_ids.append(ch_ids)
                        if image_size is None:
                            image_size = gray.shape[::-1]

            if len(all_corners) < 5:
                st.warning("Not enough valid detections. Try uploading more images with clear board visibility.")
            else:
                ret, camera_matrix, dist_coeffs, rvecs, tvecs = cv2.aruco.calibrateCameraCharuco(
                    charucoCorners=all_corners,
                    charucoIds=all_ids,
                    board=board,
                    imageSize=image_size,
                    cameraMatrix=None,
                    distCoeffs=None
                )

                st.subheader("📋 Calibration Results")
                st.markdown("**Camera Matrix:**")
                st.code(camera_matrix)
                st.markdown("**Distortion Coefficients:**")
                st.code(dist_coeffs.ravel())
                st.markdown("**Image Size:**")
                st.write(image_size)

                # Undistort preview
                st.subheader("🔍 Undistortion Preview")
                original = cv2.imread(image_paths[0])
                undistorted = cv2.undistort(original, camera_matrix, dist_coeffs)

                col1, col2 = st.columns(2)
                col1.image(cv2.cvtColor(original, cv2.COLOR_BGR2RGB), caption="Original")
                col2.image(cv2.cvtColor(undistorted, cv2.COLOR_BGR2RGB), caption="Undistorted")

                st.success("Calibration completed successfully! Ready for export or further usage.")
else:
    st.info("Please upload a ZIP file with CharuCo board images to get started.")
