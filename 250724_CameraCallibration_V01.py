# -*- coding: utf-8 -*-
"""250724_CameraCallibration_V01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QRaRFPYKc9zggyqJ2-ZcTR_OkP94yo0A
"""

import streamlit as st
import cv2
import numpy as np
import os
from glob import glob
from PIL import Image
import matplotlib.pyplot as plt

st.title("üì∏ Camera Calibration with OpenCV")
st.markdown("Upload checkerboard images to estimate distortion and correct it.")

# --- Sidebar ---
pattern_size = st.sidebar.selectbox("Checkerboard pattern size (inner corners)", ["9x6", "7x5"])
cols, rows = map(int, pattern_size.split("x"))
square_size = st.sidebar.number_input("Square size (mm)", value=25.0)

# --- Upload Images ---
uploaded_files = st.file_uploader("Upload multiple images of checkerboard", type=["jpg", "png"], accept_multiple_files=True)

if uploaded_files:
    st.success(f"{len(uploaded_files)} images uploaded.")
    objpoints = []
    imgpoints = []
    objp = np.zeros((cols * rows, 3), np.float32)
    objp[:, :2] = np.indices((cols, rows)).T.reshape(-1, 2)
    objp *= square_size

    for file in uploaded_files:
        img = Image.open(file)
        img_cv = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2GRAY)
        ret, corners = cv2.findChessboardCorners(img_cv, (cols, rows))
        if ret:
            imgpoints.append(corners)
            objpoints.append(objp)

    if len(objpoints) >= 5:
        # Use size from the last image
        h, w = img_cv.shape[:2]
        ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, (w, h), None, None)

        st.subheader("üîç Calibration Results")
        st.write("**Camera Matrix (Intrinsic Parameters):**")
        st.code(mtx)
        st.write("**Distortion Coefficients:**")
        st.code(dist.ravel())

        # Show original vs undistorted
        img = cv2.cvtColor(np.array(Image.open(uploaded_files[0])), cv2.COLOR_RGB2BGR)
        undistorted = cv2.undistort(img, mtx, dist)

        st.subheader("üéØ Undistorted Example")
        col1, col2 = st.columns(2)
        col1.image(cv2.cvtColor(img, cv2.COLOR_BGR2RGB), caption="Original")
        col2.image(cv2.cvtColor(undistorted, cv2.COLOR_BGR2RGB), caption="Undistorted")
    else:
        st.warning("At least 5 good checkerboard images are recommended.")